Include access control to restrict who can call the `setPassword` function to be only the owner: `s_owner`. 
This can be achieved in two ways:

1. Using an `if` statement, as used in the `getPassword` function, and revert with the `PasswordStore__NotOwer()` 
custom error if the address calling the function is not the owner:

    function setPassword(string memory newPassword) external {
        // @audit check that the function caller is the owner of the contract
+        if (msg.sender != s_owner) {
+            revert PasswordStore__NotOwner();
+        }
        s_password = newPassword;
        emit SetNetPassword();
    }

2. Using an access modifier e.g. OpenZeppelin's `onlyOwner`. To use this modifier, the `PasswordStore` contract will need to 
inherit from OpenZeppelin's `Ownable` contract and call it's constructor inside the constructor of `PasswordStore`:

    // @audit import the ownable contract from OpenZeppelin
    + import "@openzeppelin/contracts/ownership/Ownable.sol";

    // @audit inherit from the Ownable contract
    + contract PasswordStore is Ownable{
        error PasswordStore__NotOwner();

        address private s_owner;
        string private s_password;

        event SetNetPassword();

    +    constructor() Ownable() {
            s_owner = msg.sender;
        }
    }

As per the OpenZeppelin documentation, by default, the `owner` of an `Ownable` contract is the account that deployed it, 
meaning that the `s_owner` state variable can be removed.

Using `onlyOwner` modifier adds logic to check that the `msg.sender` is the `owner` of the contract before executing the 
function's logic:

    /*
     * @notice This function allows only the owner to set a new password.
     * @param newPassword The new password to set.
     */
+   function setPassword(string memory newPassword) external onlyOwner {
        s_password = newPassword;
        emit SetNetPassword();
    }