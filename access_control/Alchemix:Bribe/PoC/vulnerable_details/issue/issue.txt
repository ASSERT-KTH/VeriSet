The bribe contract has an access-controlled function `addRewardToken()` that allows only the corresponding gauge to add 
a new reward token to the rewards list. Although many tokens are whitelisted by the voter contract, only the gauge can determine 
which of these whitelisted tokens should be added to the bribe contract as a reward token.

    function addRewardToken(address token) external {
        require(msg.sender == gauge, "not being set by a gauge");
       
        _addRewardToken(token);
    }

    function _addRewardToken(address token) internal {
    if (!isReward[token] && token != address(0)) {
        require(rewards.length < MAX_REWARD_TOKENS, "too many rewards tokens");
        require(IVoter(voter).isWhitelisted(token), "bribe tokens must be whitelisted");

        isReward[token] = true;
        rewards.push(token);
        }
    }

The problem lies in the `notifyRewardAmount()` function, which lacks any access control. This function allows anyone to inject 
a reward into the bribe contract by specifying the token address and amount. If the token is whitelisted but not yet added to 
the rewards list, it will simply be added.

As a result, anyone can add a whitelisted token to the bribe contract by calling `notifyRewardAmount()` function with 
the token address and a minimal amount of 1 wei.

Malicious users can add numerous reward tokens to the bribe, misleading users or external projects querying the list of reward 
tokens for a particular bribe contract. Additionally, there is a `swapOutRewardToken()` function that allows the admin of the 
voter contract to swap out reward tokens.

The admin must call `swapOutRewardToken(uint256 oldTokenIndex, address oldToken, address newToken)` with the respective indexes 
of the tokens they wish to swap out. A malicious user (e.g., an aggressive competitor) can front-run the admin's transaction by 
calling `notifyRewardAmount()`, adding new tokens and thereby changing the previous token indexes to alter the intended outcome 
of the admin's transaction. This can also lead to a denial of service (DoS) for other normal functionalities, at least temporarily.
