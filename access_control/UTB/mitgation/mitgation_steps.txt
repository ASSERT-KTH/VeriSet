Primary Recommendation: 
Implement a robust access control modifier on the `UTB:receiveFromBridge` function to restrict access to known 
bridge adaptor addresses.

The `UTB:receiveFromBridge` function appears to be intended to be called by the [`DecentBridgeAdapter:receiveFromBridge`]
(https://github.com/code-423n4/2024-01-decent/blob/011f62059f3a0b1f3577c8ccd1140f0cf3e7bb29/src/bridge_adapters/DecentBridgeAdapter.sol#L147) 
and [`StargateBridgeAdapter:sgReceive`]
(https://github.com/code-423n4/2024-01-decent/blob/011f62059f3a0b1f3577c8ccd1140f0cf3e7bb29/src/bridge_adapters/StargateBridgeAdapter.sol#L209) 
functions. These functions are protected by the [`BaseAdapter:onlyExecutor`]
(https://github.com/code-423n4/2024-01-decent/blob/011f62059f3a0b1f3577c8ccd1140f0cf3e7bb29/src/bridge_adapters/BaseAdapter.sol#L11) 
modifier. No other calls to \[`UTB:receiveFromBridge`] are made in the audit codebase.

It therefore may be suitable to introduce a similar `onlyBridgeAdapter` modifier to `UTB`, using the already present 
[`UTB:bridgeAdapters`](https://github.com/code-423n4/2024-01-decent/blob/011f62059f3a0b1f3577c8ccd1140f0cf3e7bb29/src/UTB.sol#L22) 
mapping to filter calls from only allowlisted bridge adaptors:


    //File:src/UTB.sol
    ...

    modifier onlyBridgeAdapter(){
        require(bridgeAdapters[IBridgeAdapter(msg.sender).getId()] != address(0), "invalid bridge adaptor");
        _;
    }

    function receiveFromBridge(
        SwapInstructions memory postBridge,
        address target,
        address paymentOperator,
        bytes memory payload,
        address payable refund
    ) public onlyBridgeAdapter() {
        _swapAndExecute(postBridge, target, paymentOperator, payload, refund);
    }
    ...